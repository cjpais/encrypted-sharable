/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace EncryptedSharable {
  export type EncryptionKeyStruct = {
    person: PromiseOrValue<string>;
    nonce: PromiseOrValue<BytesLike>;
    ephemeralPublicKey: PromiseOrValue<BytesLike>;
    encryptedKey: PromiseOrValue<BytesLike>;
  };

  export type EncryptionKeyStructOutput = [string, string, string, string] & {
    person: string;
    nonce: string;
    ephemeralPublicKey: string;
    encryptedKey: string;
  };

  export type DataStruct = {
    creator: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    keys: EncryptedSharable.EncryptionKeyStruct[];
    userData: PromiseOrValue<BytesLike>;
  };

  export type DataStructOutput = [
    string,
    string,
    EncryptedSharable.EncryptionKeyStructOutput[],
    string
  ] & {
    creator: string;
    data: string;
    keys: EncryptedSharable.EncryptionKeyStructOutput[];
    userData: string;
  };
}

export interface EncryptedSharableInterface extends utils.Interface {
  functions: {
    "addKey(uint256,(address,bytes24,bytes32,bytes))": FunctionFragment;
    "create(bytes,(address,bytes24,bytes32,bytes)[],bytes)": FunctionFragment;
    "data(uint256)": FunctionFragment;
    "dataCount()": FunctionFragment;
    "getData(uint256)": FunctionFragment;
    "userAccess(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addKey"
      | "create"
      | "data"
      | "dataCount"
      | "getData"
      | "userAccess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addKey",
    values: [
      PromiseOrValue<BigNumberish>,
      EncryptedSharable.EncryptionKeyStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<BytesLike>,
      EncryptedSharable.EncryptionKeyStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "data",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dataCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userAccess", data: BytesLike): Result;

  events: {
    "DataCreated(uint256,address,bytes,bytes,tuple[])": EventFragment;
    "KeyAdded(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyAdded"): EventFragment;
}

export interface DataCreatedEventObject {
  id: BigNumber;
  creator: string;
  data: string;
  userData: string;
  keys: EncryptedSharable.EncryptionKeyStructOutput[];
}
export type DataCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    EncryptedSharable.EncryptionKeyStructOutput[]
  ],
  DataCreatedEventObject
>;

export type DataCreatedEventFilter = TypedEventFilter<DataCreatedEvent>;

export interface KeyAddedEventObject {
  id: BigNumber;
  key: EncryptedSharable.EncryptionKeyStructOutput;
}
export type KeyAddedEvent = TypedEvent<
  [BigNumber, EncryptedSharable.EncryptionKeyStructOutput],
  KeyAddedEventObject
>;

export type KeyAddedEventFilter = TypedEventFilter<KeyAddedEvent>;

export interface EncryptedSharable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EncryptedSharableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKey(
      id: PromiseOrValue<BigNumberish>,
      key: EncryptedSharable.EncryptionKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      _data: PromiseOrValue<BytesLike>,
      keys: EncryptedSharable.EncryptionKeyStruct[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        creator: string;
        data: string;
        userData: string;
      }
    >;

    dataCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[EncryptedSharable.DataStructOutput]>;

    userAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addKey(
    id: PromiseOrValue<BigNumberish>,
    key: EncryptedSharable.EncryptionKeyStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    _data: PromiseOrValue<BytesLike>,
    keys: EncryptedSharable.EncryptionKeyStruct[],
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  data(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      creator: string;
      data: string;
      userData: string;
    }
  >;

  dataCount(overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EncryptedSharable.DataStructOutput>;

  userAccess(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addKey(
      id: PromiseOrValue<BigNumberish>,
      key: EncryptedSharable.EncryptionKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      _data: PromiseOrValue<BytesLike>,
      keys: EncryptedSharable.EncryptionKeyStruct[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        creator: string;
        data: string;
        userData: string;
      }
    >;

    dataCount(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EncryptedSharable.DataStructOutput>;

    userAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DataCreated(uint256,address,bytes,bytes,tuple[])"(
      id?: null,
      creator?: null,
      data?: null,
      userData?: null,
      keys?: null
    ): DataCreatedEventFilter;
    DataCreated(
      id?: null,
      creator?: null,
      data?: null,
      userData?: null,
      keys?: null
    ): DataCreatedEventFilter;

    "KeyAdded(uint256,tuple)"(id?: null, key?: null): KeyAddedEventFilter;
    KeyAdded(id?: null, key?: null): KeyAddedEventFilter;
  };

  estimateGas: {
    addKey(
      id: PromiseOrValue<BigNumberish>,
      key: EncryptedSharable.EncryptionKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      _data: PromiseOrValue<BytesLike>,
      keys: EncryptedSharable.EncryptionKeyStruct[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataCount(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      id: PromiseOrValue<BigNumberish>,
      key: EncryptedSharable.EncryptionKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _data: PromiseOrValue<BytesLike>,
      keys: EncryptedSharable.EncryptionKeyStruct[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
